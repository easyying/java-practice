<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.daguo</groupId>
    <artifactId>java-basic</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- 2. 设置项目编码编码   spring版本  mybatis版本  spring和mybatis结合  spring和spring mvc结合 -->
    <properties>
        <!-- Plugin的属性定义 -->
        <checkstyle.failOnViolation>false</checkstyle.failOnViolation>
        <checkstyle.skip>true</checkstyle.skip>
        <findbugs.failOnError>false</findbugs.failOnError>
        <pmd.failOnViolation>false</pmd.failOnViolation>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- spring版本号 -->
        <spring.version>4.1.1.RELEASE</spring.version>
        <!-- mybatis版本号 -->
        <mybatis.version>3.4.0</mybatis.version>    <!--spring和mybatis的整合版本问题-->
        <!-- log4j日志文件管理包版本 -->
        <slf4j.version>1.7.7</slf4j.version>
        <log4j.version>1.2.17</log4j.version>
        <!-- jackson包版本 -->
        <jackson.version>2.5.0</jackson.version>
    </properties>

    <!--  2. 打包方法
     <packaging>war</packaging>-->


    <!--3. 该元素描述了项目相关的所有依赖-->
    <dependencies>

        <!--junit 单元测试依赖  3.0的junit是使用编程的方式来进行测试，而junit4是使用注解的方式来运行junit-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.2</version>
            <!-- 表示开发的时候引入，发布的时候不会加载此包，指定范围，在测试时才会加载 -->
            <scope>test</scope>
        </dependency>

        <!--a.日志 java日志有:slf4j,log4j,logback,common-logging
        slf4j:是规范/接口
        日志实现:log4j,logback,common-logging

        使用:slf4j+log4j-->
        <!-- 日志文件管理包 -->
        <!-- log start -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- log end -->



        <!--b. 数据库相关依赖-->
        <!-- 连接数据库的所使用的jdbc连接驱动jar包 Mysql数据库驱动包-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.34</version>
        </dependency>
        <!-- 数据库连接池 -->
        <!-- <dependency>
             <groupId>c3p0</groupId>
             <artifactId>c3p0</artifactId>
             <version>0.9.1.1</version>
         </dependency>-->

        <!--数据库连接池-->
        <!-- connection pool -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.5</version>
            <scope>runtime</scope>
        </dependency>


        <!--c. dao框架:MyBatis依赖-->
        <!--mybatis核心包-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <!--mybatis自身实现的spring整合依赖-->   <!-- mybatis/spring整合包 -->
        <!--(mybatis-spring整合包:spring和mybatis整合需要引入这个jar包)  mybatis-spring 插件、，这样就可以通过spring配置bean的方式进行mybatis配置了，
        不然需要单独使用mybatis的配置！！！！！！！！

        功能：mybatis-spring整合！！！！！！！！！！！！
        目的：通过spring管理mapper接口
        使用mapper的扫描器自动扫描mapper接口在spring中进行注册。
        配置mapper
        由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。
        但是必须遵循：mapper.xml和mapper.java文件同名且在一个目录-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>1.3.2</version>
        </dependency>

        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.1.1</version>
        </dependency>


        <!--d.Servlet web相关依赖-->
        <!--servlet-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.2</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>standard</artifactId>
            <version>1.1.2</version>
        </dependency>



        <!--e:spring依赖-->
        <!--1)spring核心依赖-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId> <!--spring的核心包-->
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId> <!--IOC的基础实现-->
            <version>${spring.version}</version>
        </dependency>
        <!-- Spring 扩展服务 -->
        <!-- 上下文的：全权负责对象的创建和组装-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>  <!--IOC基础上的扩展服务-->
            <version>${spring.version}</version>
        </dependency>
        <!--2)spring dao层依赖     - 为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!--对Spring 对JDBC 数据访问进行封装的所有类-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!--3)springweb相关依赖-->
        <!-- springMVC核心包 -->
        <!-- <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-webmvc</artifactId>
             <version>${spring.version}</version>
         </dependency>-->
        <!-- springMVC -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId> <!--mvc包:表单标签库的实现类-->
            <version>${spring.version}</version>
        </dependency>
        <!--SpringMVC支持web端部署框架 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>   <!--web工具包-->
            <version>${spring.version}</version>
        </dependency>
        <!--4)spring test相关依赖-->
        <!--spring单元测试依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-test</artifactId>
             <version>4.2.5.RELEASE</version>
         </dependency>-->

        <!--5)spring aop相关依赖-->
        <!--springaop依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId> org.aspectj</groupId >
            <artifactId> aspectjweaver</artifactId >
            <version> 1.8.7</version >
        </dependency>

        <!--f.Servlet web相关依赖-->
        <!-- 引入JSON  @ResponseBody需要使用的包 json字符串-->

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <!--json格式-->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-lgpl</artifactId>
            <version>1.9.13</version>
        </dependency>

        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-core-asl</artifactId>
            <version>1.9.13</version>
        </dependency>
        <!-- <dependency>
             <groupId>com.alibabab</groupId>
             <artifactId>dubbo</artifactId>
             <version>${dubbo.version}</version>
         </dependency>-->

        <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.1</version>
            <classifier>jdk15</classifier>
        </dependency>


        <!--引入支持文件上传的包-->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3.1</version>
        </dependency>

        <!--<dependency>
            <groupId>tomcat</groupId>
            <artifactId>servlet-api</artifactId>
            <version>5.5.23</version>
        </dependency>
-->

        <!--mybatis逆向工程的依赖!!!-->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>RELEASE</version>
        </dependency>
        <!--<dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>RELEASE</version>
        </dependency>-->

        <!--guice-->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>1.0</version>
        </dependency>


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>2.9.0</version>
        </dependency>


    </dependencies>

    <!--4. 构建项目需要的信息：将tomcat作为插件放到build节点中-->
    <build>
        <finalName>practice1</finalName>
        <!--解决idea源经常重置为1.5问题-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <!-- 设置JDK版本 -->
                <configuration>
                    <source>1.7</source> <!--指定maven使用的jdk版本-->
                    <target>1.7</target> <!--指定maven使用的jdk版本-->
                </configuration>
            </plugin>

            <!-- 在pom.xml核心配置文件中加入mybatis逆向工程插件-->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.2</version>

                <configuration>
                    <!--配置文件的路径-->
                    <configurationFile>${basedir}/src/main/resources/generatorConfig.xml</configurationFile>

                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>

                <!-- 配置generator运行插件,使maven执行generator -->
                <executions>
                    <execution>
                        <id>Generate MyBatis Artifacts</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>

        </plugins>





        <!--若不配置，可能会发送打包不全-->
        <!-- 这个元素描述了项目相关或测试相关的所有资源路径：解决Maven项目编译后classes文件中没有.xml问题 -->
        <resources>
            <resource>
                <!--需要打包的目录   表明资源文件的路径-->
                <directory>src/main/java</directory>
                <!--目录中的文件类型-->
                <includes>
                    <include>**/*.xml</include>   <!--表明需要编译打包的文件类型是xml文件-->
                    <include>**/*.properties</include>
                </includes>
                <filtering>true</filtering>
            </resource>

            <resource>
                <!--需要打包的目录-->
                <directory>src/main/resources</directory>  <!--*/.xml是通配符，匹配src/main/java目录下所有的xml文件，将其映射为资源文件，这样，IDEA就会加载该xml文件-->
                <!--目录中的文件类型-->
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
        </resources>



    </build>


</project>